
About Manager
using UnityEngine;
using UnityEngine.UI;
using TMPro;
public class AboutManager : MonoBehaviour
{
 public enum AboutScreenSample
 {
 ImageTargets,
 VuMark,
 CylinderTargets,
 MultiTargets,
 UserDefinedTargets,
 ObjectReco,
 CloudReco,


 VirtualButtons,
 ModelTargets,
 GroundPlane,
 BackgroundTextureAccess,
 OcclusionManagement,
 Books,
 ARVR
 }
 #region PUBLIC_MEMBERS
 public AboutScreenSample m_AboutScreenSample;
 #endregion //PUBLIC_MEMBERS
 #region PRIVATE_METHODS
 public void LoadNextScene()
 {

UnityEngine.SceneManagement.SceneManager.LoadScene(UnityEngine.SceneManagement.Sce
neManager.GetActiveScene().buildIndex + 1);
 }
 #endregion //PRIVAT


 #region MONOBEHAVIOUR_METHODS
 void Start()
 {
 UpdateAboutText();
 }
 void Update()
 {
 if (Input.GetKeyUp(KeyCode.Return) || Input.GetKeyUp(KeyCode.JoystickButton0))
 {
 LoadNextScene();
 }
 if (Input.GetKeyUp(KeyCode.Escape))
 {
 if (Application.isEditor)
 {
#if UNITY_EDITOR


 UnityEditor.EditorApplication.isPlaying = false;
#endif
 }
 else
 {
 Application.Quit();
 }
 }
 }
 #endregion // MONOBEHAVIOUR_METHODS
 void UpdateAboutText()
 {
 AboutScreenInfo m_AboutScreenInfo = new AboutScreenInfo();
 string title = m_AboutScreenInfo.GetTitle(m_AboutScreenSample.ToString());
 string description =
m_AboutScreenInfo.GetDescription(m_AboutScreenSample.ToString());
 Text[] textElements = GetComponentsInChildren<Text>();
 textElements[0].text = title;

 TextMeshProUGUI textMeshProUGUI =
GetComponentInChildren<TextMeshProUGUI>();
 textMeshProUGUI.text = description;
 }
}
Camera Settings
using UnityEngine;
using System.Collections;
using Vuforia;
public class CameraSettings : MonoBehaviour


{
 #region PRIVATE_MEMBERS
 private bool mVuforiaStarted = false;
 private bool mAutofocusEnabled = true;
 private bool mFlashTorchEnabled = false;
 #endregion //PRIVATE_MEMBERS
 #region MONOBEHAVIOUR_METHODS
 void Start()
 {
 var vuforia = VuforiaARController.Instance;
 vuforia.RegisterVuforiaStartedCallback(OnVuforiaStarted);
 vuforia.RegisterOnPauseCallback(OnPaused);
 }
 #endregion // MONOBEHAVIOUR_METHODS
 #region PUBLIC_METHODS
 public bool IsFlashTorchEnabled()
 {


 return mFlashTorchEnabled;
 }
 public void SwitchFlashTorch(bool ON)
 {
 if (CameraDevice.Instance.SetFlashTorchMode(ON))
 {
 Debug.Log("Successfully turned flash " + ON);
 mFlashTorchEnabled = ON;
 }
 else
 {
 Debug.Log("Failed to set the flash torch " + ON);
 mFlashTorchEnabled = false;
 }
 }
 public bool IsAutofocusEnabled()
 {
 return mAutofocusEnabled;
 }


 public void SwitchAutofocus(bool ON)
 {
 if (ON)
 {
 if
(CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_CONTIN
UOUSAUTO))
 {
 Debug.Log("Successfully enabled continuous autofocus.");
 mAutofocusEnabled = true;
 }
 else
 {
 // Fallback to normal focus mode
 Debug.Log("Failed to enable continuous autofocus, switching to normal focus mode");
 mAutofocusEnabled = false;

CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_NORMAL
);
 }
 }


 else
 {
 Debug.Log("Disabling continuous autofocus (enabling normal focus mode).");
 mAutofocusEnabled = false;

CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_NORMAL
);
 }
 }
 public void TriggerAutofocusEvent()
 {
 // Trigger an autofocus event

CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_TRIGGER
AUTO);
 // Then restore original focus mode
 StartCoroutine(RestoreOriginalFocusMode());
 }
 public bool RestartCamera()


 {
 ObjectTracker objectTracker = TrackerManager.Instance.GetTracker<ObjectTracker>();
 if (objectTracker != null)
 {
 objectTracker.Stop();
 }
 // Camera must be deinitialized before attempting to deinitialize trackers
 CameraDevice.Instance.Stop();
 CameraDevice.Instance.Deinit();
 if (!CameraDevice.Instance.Init())
 {
 Debug.Log("Failed to initialize the camera.");
 return false;
 }
 if (!CameraDevice.Instance.Start())
 {
 Debug.Log("Failed to start the camera.");
 return false;


 }
 if (objectTracker != null)
 {
 if (!objectTracker.Start())
 {
 Debug.Log("Failed to restart the Object Tracker.");
 return false;
 }
 }
 return true;
 }
 #endregion // PUBLIC_METHODS
 #region PRIVATE_METHODS
 private void OnVuforiaStarted()
 {
 mVuforiaStarted = true;
 // Try enabling continuous autofocus


 SwitchAutofocus(true);
 }
 private void OnPaused(bool paused)
 {
 bool appResumed = !paused;
 if (appResumed && mVuforiaStarted)
 {
 // Restore original focus mode when app is resumed
 if (mAutofocusEnabled)

CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_CONTINU
OUSAUTO);
 else

CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_NORMAL
);
 }
 else
 {
 // Set the torch flag to false on pause (because the flash torch is switched off by the OS
automatically)
 mFlashTorchEnabled = false;


 }
 }
 private IEnumerator RestoreOriginalFocusMode()
 {
 // Wait 1.5 seconds
 yield return new WaitForSeconds(1.5f);
 // Restore original focus mode
 if (mAutofocusEnabled)

CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_CONTINU
OUSAUTO);
 else

CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_NORMAL
);
 }
 #endregion // PRIVATE_METHODS
}


Navigation Handler
using UnityEngine;
using UnityEngine.SceneManagement;
public class NavigationHandler : MonoBehaviour
{
 #region PUBLIC_MEMBERS
 public string m_BackButtonNavigation = "[Name of Scene To Load]";
 #endregion // PUBLIC_MEMBERS
 #region MONOBEHAVIOUR_METHODS
 void Update()
 {
 // On Android, the Back button is mapped to the Esc key
 if (Input.GetKeyUp(KeyCode.Escape))
 {
 HandleBackButtonPressed();
 }
 }


 #endregion // MONOBEHAVIOUR_METHODS
 #region PUBLIC_METHODS
 public void HandleBackButtonPressed()
 {
 Debug.Log("HandleBackButtonPressed() called.");
 if (SceneManager.GetActiveScene().name != m_BackButtonNavigation)
 LoadScene(m_BackButtonNavigation);
 }
 #endregion // PUBLIC_METHODS
 #region PRIVATE_METHODS
 void LoadScene(string sceneName)
 {
 Debug.Log("LoadScene(" + sceneName + ") called.");
 if (!string.IsNullOrEmpty(sceneName))
 {
 SceneManager.LoadScene(sceneName);
 }


 }
 #endregion // PRIVATE_METHODS
}
====================
=========================================================
Track able Settings
using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Vuforia;
using System.Timers;
public class TrackableSettings : MonoBehaviour
{
 #region PRIVATE_MEMBERS
 [SerializeField] bool deviceTrackerEnabled;
 PositionalDeviceTracker positionalDeviceTracker;


 Timer relocalizationStatusDelayTimer;
 Timer resetDeviceTrackerTimer;
 #endregion // PRIVATE_MEMBERS
 #region UNITY_MONOBEHAVIOUR_METHODS
 private void Awake()
 {
 VuforiaARController.Instance.RegisterVuforiaInitializedCallback(OnVuforiaInitialized);
 }
 private void Start()
 {
 VuforiaARController.Instance.RegisterVuforiaStartedCallback(OnVuforiaStarted);

DeviceTrackerARController.Instance.RegisterDevicePoseStatusChangedCallback(OnDevicePos
eStatusChanged);
 // Setup a timer to have short delay before processing RELOCALIZING status
 this.relocalizationStatusDelayTimer = new Timer(1000);
 this.relocalizationStatusDelayTimer.Elapsed += RelocalizingStatusDelay;


 this.relocalizationStatusDelayTimer.AutoReset = false;
 // Setup a timer to restart the DeviceTracker if tracking does not receive
 // status change from StatusInfo.RELOCALIZATION after 10 seconds.
 this.resetDeviceTrackerTimer = new Timer(10000);
 this.resetDeviceTrackerTimer.Elapsed += ResetDeviceTracker;
 this.resetDeviceTrackerTimer.AutoReset = false;
 }
 private void OnDestroy()
 {
 VuforiaARController.Instance.UnregisterVuforiaStartedCallback(OnVuforiaStarted);
 VuforiaARController.Instance.UnregisterVuforiaInitializedCallback(OnVuforiaInitialized);

DeviceTrackerARController.Instance.UnregisterDevicePoseStatusChangedCallback(OnDeviceP
oseStatusChanged);
 }
 #endregion // UNITY_MONOBEHAVIOUR_METHODS
 #region VUFORIA_CALLBACKS


 private void OnVuforiaInitialized()
 {
 this.positionalDeviceTracker =
TrackerManager.Instance.GetTracker<PositionalDeviceTracker>();
 // if we don't have yet a positional device tracker, initialize one
 if (this.positionalDeviceTracker == null)
 {
 this.positionalDeviceTracker =
TrackerManager.Instance.InitTracker<PositionalDeviceTracker>();
 if (this.positionalDeviceTracker != null)
 {
 Debug.Log("Successfully initialized the positional device tracker");
 }
 else
 {
 Debug.LogError("Failed to initialize the positional device tracker");
 }
 }


 }
 private void OnVuforiaStarted()
 {
 // Device Tracking is off by default for mobile samples.
 // The deviceTrackerEnabled public Inspector option allows you to specify
 // per-sample if the option is to be on by default. (i.e. Model Targets)
 ToggleDeviceTracking(this.deviceTrackerEnabled);
 }
 void OnDevicePoseStatusChanged(Vuforia.TrackableBehaviour.Status status,
Vuforia.TrackableBehaviour.StatusInfo statusInfo)
 {
 Debug.Log("OnDevicePoseStatusChanged(" + status + ", " + statusInfo + ")");
 if (statusInfo == Vuforia.TrackableBehaviour.StatusInfo.RELOCALIZING)
 {
 // If the status is Relocalizing, then start the timer if it isn't active
 if (!this.relocalizationStatusDelayTimer.Enabled)
 {
 this.relocalizationStatusDelayTimer.Start();


 }
 }
 else
 {
 // If the status is not Relocalizing, then stop the timers if they are active
 if (this.relocalizationStatusDelayTimer.Enabled)
 {
 this.relocalizationStatusDelayTimer.Stop();
 }
 if (this.resetDeviceTrackerTimer.Enabled)
 {
 this.resetDeviceTrackerTimer.Stop();
 }
 // Clear the status message
 StatusMessage.Instance.Display(string.Empty);
 }
 }
 #endregion // VUFORIA_CALLBACKS


 #region PRIVATE_METHODS
 // This is a C# delegate method for the Timer:
 // ElapsedEventHandler(object sender, ElapsedEventArgs e)
 void RelocalizingStatusDelay(System.Object source, ElapsedEventArgs e)
 {
 StatusMessage.Instance.Display("Point camera to previous position to restore tracking");
 if (!this.resetDeviceTrackerTimer.Enabled)
 {
 this.resetDeviceTrackerTimer.Start();
 }
 }
 // This is a C# delegate method for the Timer:
 // ElapsedEventHandler(object sender, ElapsedEventArgs e)
 void ResetDeviceTracker(System.Object source, ElapsedEventArgs e)
 {
 ToggleDeviceTracking(false);


 ToggleDeviceTracking(true);
 }
 #endregion // PRIVATE_METHODS
 #region PUBLIC_METHODS
 public bool IsDeviceTrackingEnabled()
 {
 return this.deviceTrackerEnabled;
 }
 public virtual void ToggleDeviceTracking(bool enableDeviceTracking)
 {
 if (this.positionalDeviceTracker != null)
 {
 if (enableDeviceTracking)
 {


 // if the positional device tracker is not yet started, start it
 if (!this.positionalDeviceTracker.IsActive)
 {
 if (this.positionalDeviceTracker.Start())
 {
 Debug.Log("Successfully started device tracker");
 }
 else
 {
 Debug.LogError("Failed to start device tracker");
 }
 }
 }
 else if (this.positionalDeviceTracker.IsActive)
 {
 this.positionalDeviceTracker.Stop();
 Debug.Log("Successfully stopped device tracker");
 }
 }
 else


 {
 Debug.LogError("Failed to toggle device tracker state, make sure device tracker is
initialized");
 }
 this.deviceTrackerEnabled = this.positionalDeviceTracker.IsActive;
 }
 public string GetActiveDatasetName()
 {
 ObjectTracker tracker = TrackerManager.Instance.GetTracker<ObjectTracker>();
 List<DataSet> activeDataSets = tracker.GetActiveDataSets().ToList();
 if (activeDataSets.Count > 0)
 {
 string datasetPath = activeDataSets.ElementAt(0).Path;
 string datasetName = datasetPath.Substring(datasetPath.LastIndexOf("/") + 1);
 return datasetName.TrimEnd(".xml".ToCharArray());
 }
 else
 {


 return string.Empty;
 }
 }
 public void ActivateDataSet(string datasetName)
 {
 // ObjectTracker tracks ImageTargets contained in a DataSet and provides methods for
creating and (de)activating datasets.
 ObjectTracker objectTracker = TrackerManager.Instance.GetTracker<ObjectTracker>();
 IEnumerable<DataSet> datasets = objectTracker.GetDataSets();
 IEnumerable<DataSet> activeDataSets = objectTracker.GetActiveDataSets();
 List<DataSet> activeDataSetsToBeRemoved = activeDataSets.ToList();
 // 1. Loop through all the active datasets and deactivate them.
 foreach (DataSet ads in activeDataSetsToBeRemoved)
 {
 objectTracker.DeactivateDataSet(ads);
 }


 // Swapping of the datasets should NOT be done while the ObjectTracker is running.
 // 2. So, Stop the tracker first.
 objectTracker.Stop();
 // 3. Then, look up the new dataset and if one exists, activate it.
 foreach (DataSet ds in datasets)
 {
 if (ds.Path.Contains(datasetName))
 {
 objectTracker.ActivateDataSet(ds);
 }
 }

 // 4. Finally, restart the object tracker and reset the device tracker.
 objectTracker.Start();
 if (this.positionalDeviceTracker != null)
 {
 this.positionalDeviceTracker.Reset();


 }
 else
 {
 Debug.LogError("Failed to reset device tracker");
 }
 }
 #endregion //PUBLIC_METHODS
}
